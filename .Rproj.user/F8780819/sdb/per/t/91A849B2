{
    "collab_server" : "",
    "contents" : "  #Bootstrapping code\n####### PURPOSE: Script to bootstrap on the data set to find the confidence interval for the threshold\n#estimate (for Fig 2A)\n####### INSTRUCTIONS: set the bootstrap sample size you want to do in the Fig2A_B.R script\n####### INSTRUCTIONS: set the path where you downloaded and saved the global dataset\n####### REQUIREMENTS: you need the script bootstrapping.R and to have the R packages 'gam',\n#'changepoint', and 'time' installed\n####### INPUTS: the global_dataset.csv file\n####### OUTPUTS: Figs. 2A\n#############################################################\n### The global data set contains some holes in the times series. We first select the years we have both a\n#breeding success and an abundance estimate for the prey\n\nRun.Bootstrap <- function(t_glob){\n  data <- t_glob[complete.cases(t_glob),]\n  \n  ids <- c(1:nrow(data))\n  \n  bird <- as.numeric(data[,2])  \n  prey <- as.numeric(data[,3])\n  req1 <- which(is.na(bird)==T)\n  if (length(req1) >0) {bird<-bird[-req1];prey<-prey[-req1] }\n  req2<-which(is.na(prey)==T)\n  if (length(req2) >0) {bird<-bird[-req2];prey<-prey[-req2] }\n  ####### RESAMPLING #########\n  nb <- bootstrap_size\n  thresh <- vector(length=nb) ## create a vector to be filled with the estimated threshold\n  prev <- txtProgressBar(min=0,max=nb,style=3) ## just to display how long it remains for the bootstrap\n  for (i in 1:nb) {\n    setTxtProgressBar(prev,i)\n    set.seed(i)\n    bootsample <- sample(1:length(bird), replace=T)\n    birdi <- bird[bootsample]\n    preyi <- prey[bootsample]\n    #idsi <- ids[bootsample]\n    \n    #dat2 <- data.frame(idsi,birdi,preyi)\n    #dat2 <- dat2[order(dat2$idsi),]\n    \n    #######Computing threshold on new sample #######\n    gam.object <- gam(birdi~s(preyi, k=smoother_size))#,data=dat2)\n    prediction <- predict(gam.object, se.fit=T)\n    fds <- cbind(prediction$fit,preyi,prediction$se.fit,0,0)\n    fds2 <- order(fds[,2])\n    titu <- spline(prediction$fit[fds2]~preyi[fds2],n=200)\n    \n    data <- cbind(titu$x[1:150],1,titu$y[1:150])\n    \n    x <- sum(gam.object$edf)\n  \n    if(round(x,4) < 2.1){\n      thresh[i] <- NA\n    }else{\n      try({\n        #change_point <- cpt.mean(data[,1],penalty=\"MBIC\")\n        change_point <- EnvCpt:::cpt.reg(data,penalty=\"SIC\") ## Calculate the position of the threshold (see changepoint package)  ##cpt.reg\n        cpts(change_point)\n        #data[cpts(change_point),1]\n        \n      })\n      #print(titu$x[cpts(change_point)[1]])\n      thresh[i] <- titu$x[cpts(change_point)[1]]\n    }\n    \n    \n    remove(change_point)\n  }\n  close(prev)\n  return(thresh)\n}\n\n\n### Reset the values to initial values\n\n\n# data <- t_glob\n# bird<-as.numeric(data[,2])\n# prey<-as.numeric(data[,3])\n# req1<-which(is.na(bird)==T)\n# if (length(req1) >0){bird<-bird[-req1];prey<-prey[-req1] }\n# req2<-which(is.na(prey)==T)\n# if (length(req2) >0){bird<-bird[-req2];prey<-prey[-req2] }\n# gam.object<-gam(bird~s(prey, smoother_size))\n# prediction<-predict(gam.object, se.fit=T)\n# fds<-cbind(prediction$fit,prey,prediction$se.fit,0,0)\n# fds2<-order(fds[,2])\n# titu <- spline(prediction$fit[fds2]~prey[fds2],n=200)\n# \n# MaxPrey<-max(data[,3],na.rm=T)\n# \n# MinPrey<-min(data[,3],na.rm=T)\n# Quant<-quantile(thresh, c(0.1, 0.9),na.rm=T)\n# PercMax<-round((max(Quant) + abs(MinPrey) )/(MaxPrey+abs(MinPrey)),2)*100\n# PercMin<-round((min(Quant) + abs(MinPrey) )/(MaxPrey+abs(MinPrey)),2)*100\n# \n# \n# print(paste(\"max value of threshold CV is \",as.character(max(Quant)),sep=\"\"))\n# print(paste(\"max value is \",PercMax,\"% of max prey biomass (\",as.character(MaxPrey),\")\",sep=\"\"))\n# print(paste(\"min value of threshold CV is \",as.character(min(Quant)),sep=\"\"))\n# print(paste(\"min value is \",PercMin,\"% of max prey biomass (\",as.character(MaxPrey),\")\",sep=\"\"))\n\n\nplotdata <- function(data,FigName,pngfigure,smoother_size,labs=FALSE,plotlines=TRUE,pntsize=1){\n  \n  data <- data[complete.cases(data),]\n  if(labs==TRUE){\n    data$legend <- as.character(data$legend)  \n  }\n  \n  predator <- data[,2]\n  prey <- data[,3]\n  \n  gam.obj <- gam(predator~s(prey, k=smoother_size))\n  \n  \n  if (pngfigure==1){\n    pnam <- paste('../Figures/',FigName,sep='')\n    png(pnam, width=1200, height=1200)\n  }\n  par(mar=c(7,6,3,1))\n  \n  MIN.x<-min(data[which(!is.na(data[,3])),3])\n  MAX.x<-max(data[which(!is.na(data[,3])),3])\n  MIN.y<-min(data[which(!is.na(data[,2])),2])\n  MAX.y <- 3\n  #MAX.y<-max(data[which(!is.na(data[,2])),2])\n  \n  prediction<-predict(gam.obj, se.fit=T)\n  fds<-cbind(prediction$fit,prey,prediction$se.fit,0,0)\n  fds2<-order(fds[,2])\n  titu <- spline(prediction$fit[fds2]~prey[fds2],n=200)\n  \n  plot(min(prey),min(predator), col=\"transparent\" ,main=\"\",ylab=\"Breeding success (-)\", \n       xlab=\"Prey abundance (-)\", cex.lab=2.5, cex.axis=2.5, pch=16, cex.main=2, \n       xlim=c(MIN.x,MAX.x),ylim=c(-2,MAX.y))\n  lines(titu, lwd=2)\n  xd<-c(fds[fds2,2],rev(fds[fds2,2]))\n  up.sd<-prediction$fit[fds2]+1.96*prediction$se.fit[fds2]\n  down.sd<-prediction$fit[fds2]-1.96*prediction$se.fit[fds2]\n  yd<-c(up.sd,rev(down.sd))\n  polygon(xd,yd,col=\"grey81\",lty=1,border=\"transparent\")\n  lines(titu$y~titu$x, lwd=4)\n  if(labs == TRUE){\n    points(data[,3],data[,2],pch=16,col=data$colour,cex=pntsize)  \n  }else if(labs == FALSE){\n    points(data[,3]~data[,2],pch=16, col='black', cex=pntsize)\n  }\n  \n\n  data2 <- cbind(titu$x[1:150],1,titu$y[1:150])\n  \n  tryCatch({\n    #change_point <- cpt.mean(data2[,1],penalty=\"SIC0\") \n    change_point <- EnvCpt:::cpt.reg(data2,penalty=\"SIC\",pen.value=0)\n    threshold <- titu$x[cpts(change_point)[1]]## Calculate the position of the threshold (see changepoint package)  ##cpt.reg\n    percentage_threshold <- (threshold+abs(min(prey)))/(max(prey)+abs(min(prey)))\n  },error = function(e){\n    #    ##cpt.reg\n    change_point <- -10\n  })\n  \n  #change_point <- cpt.mean(data2[,1],penalty=\"MBIC\")     ##cpt.reg\n  \n    ##\n  if(plotlines == TRUE){\n    abline(v=threshold, lwd=4, col=\"orange\")  \n  }\n  \n\n  \n  \n  if(labs == TRUE){\n    if(plotlines == TRUE){\n      text((threshold+0.3),(MAX.y-0.3), paste(\"Threshold: \",signif(threshold,2), \"\\ni.e.\",\n                                           paste(signif(percentage_threshold*100,2)),\n                                           \"% of max prey abundance\"), pos=4, cex=2.5)\n    }\n    #text(2.5,2.5, paste(\"AIC=\",signif(AIC(gam.obj),5),sep=\" \"), pos=4, cex=2.5)\n    legend(\"bottomright\", pch=16, col=unique(paste(data$colour)), legend=unique(data$legend),\n          cex=2)\n  }\n \n  ### plot the confidence interval\n  IC<-quantile(thresh, c(0.025, 0.975),na.rm=T)\n  \n  if(plotlines == TRUE){\n    abline(v=IC[1], lwd=3, lty=2, col=\"black\")\n    abline(v=IC[2], lwd=3, lty=2, col=\"black\")  \n  }\n  \n  if (pngfigure==1){\n    dev.off()\n  }\n  \n  #return(change_point)\n}\n\n\n\n\n\n######################################################################################\n#### Calculate parametric AIC values for global models ####\n###########################################################\n\n\n\n# \n# nls_cont <- nls.control(maxiter = 500, tol = 1e-05, minFactor = 1/(1024*20),\n#                         printEval = FALSE, warnOnly = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1519933426889.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "242908804",
    "id" : "91A849B2",
    "lastKnownWriteTime" : 1526646294,
    "last_content_update" : -2147483648,
    "path" : "D:/Dropbox/BlackBawks/PROJECTS/Farallon/OneThird/bootstrapping_Thayer.R",
    "project_path" : "bootstrapping_Thayer.R",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}